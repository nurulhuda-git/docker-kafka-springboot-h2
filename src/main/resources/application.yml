spring:
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: 

  h2:
    console:
      enabled: true
      path: '/h2'
      settings.web-allow-others: true

  kafka:
    properties:
      security.protocol: 'PLAINTEXT'
    bootstrap-servers: ${KAFKA_HOST}
    producer:
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: messaging_api
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.json.trusted.packages: '*'
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
    listener:
      missing-topics-fatal: false

kafka:
  enabled: true
  topics:
    project-status-changed: Kafka_Example


## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
# spring.datasource.url=jdbc:postgresql://localhost:5433/config
# spring.datasource.username=einstein
# spring.datasource.password=einstein

# spring.datasource.url=${SPRING_DB_HOST}
# spring.datasource.username=${SPRING_DB_USER}
# spring.datasource.password=${SPRING_DB_USER}

# The SQL dialect makes Hibernate generate better SQL for the chosen database
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
# spring.jpa.hibernate.ddl-auto = update